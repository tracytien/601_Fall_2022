---
title: "Challenge 3"
author: "Tracy Tien"
desription: "Tidy Data: Pivoting"
date: "12/01/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - animal_weights
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê

```{r}
#Read in the data
animal_weight <- read_csv("_data/animal_weight.csv")
animal_weight

spec(animal_weight)
#Load packages
library(tidyverse)
#install.packages("psych")
library(psych)

describe(animal_weight)
```

### Briefly describe the data

The `animal_weight` dataset contains 16 types (including subtypes, such as dairy cattle vs. non-dairy cattle) of livestock weight information for 9 IPCC (Intergovernmental Panel on Climate Change) areas. 

## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

The current dimensions of `animal_weight` are 9 rows of IPCC Areas, and 17 columns (types of livestock). 9*(17-1)=144 rows, and we will want each row to have the IPCC region, type of livestock, and the weight. This means there should be 3 columns. 

```{r}
#Existing rows/cases
nrow(animal_weight)

#Existing columns/cases
ncol(animal_weight) 

#Expected rows/cases
nrow(animal_weight) * (ncol(animal_weight)-1) #subtract first column IPCC Area
```

Any additional comments?

## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data
Using `pivot_longer` to transform the data where each row represents a livestock type with its weight within an IPCC region.

```{r}
animal_weight_pivot_longer <- pivot_longer(animal_weight,
                                           cols = -`IPCC Area`, #the - means except for this column?
                                           names_to = "livestock type",
                                           values_to = "weight")
animal_weight_pivot_longer


```

